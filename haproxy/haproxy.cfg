# 写入配置文件
global # 全局参数配置
  # daemon # 后台运行
  log 127.0.0.1 local0 info # 定义日志分别输出到local3、4

defaults # 默认参数配置
  log global
  mode tcp # 代理模式tcp、http
  retries 3 # 检测次数
  maxconn 32768 # 每一个代理的最大连接数
  timeout connect 5s # 成功连接到一台服务器的最长等待时间
  timeout client 5s # 连接客户端发送数据时的成功连接最长等待时间
  timeout server 5s # 服务器端回应客户度数据发送的最长等待时间

listen proxy01 # 代理01，名字自定义
  bind *:5000 # 侦听IP和端口，单一IP或多个，0.0.0.0:5000 | 192.168.0.1:5000
  mode http  # 代理模式，覆盖了上面默认配置
  balance roundrobin # 负载均衡方式，轮询
  option httplog # 日志记录HTTP请求
  option dontlognull # 日志中将不会记录空连接
  option forwardfor # 启用X-Forwarded-For，在requests头部插入客户端IP发送给后端的server，使后端server获取到客户端的真实IP
  http-request set-header Host www.examplesite.com # 设定头，有时候后端服务器需要，不需要可不设置

  # HAProxy持久连接方式
  # 使用 选项http-server-close 可保留客户端持久连接，同时分别处理每个传入请求，并以HTTP关闭模式将它们一个接一个地分派给服务器。
  # 使用  option httpclose 将双方都切换到HTTP关闭模式。
  # option forceclose 和  option http-pretend-keepalive 有助于解决在HTTP关闭模式下行为异常的服务器。
  option http-server-close
  option http-pretend-keepalive

  # 日志格式
  # log-format %ci:%cp\ %si:%sp\ %B\ %U\ %ST\ %r\ %b\ %f\ %bi\ %hrl\ %hsl\
  log-format {"haproxy_clientIP":"%ci","haproxy_clientPort":"%cp","haproxy_dateTime":"%t","haproxy_frontendNameTransport":"%ft","haproxy_backend":"%b","haproxy_serverName":"%s","haproxy_Tw":"%Tw","haproxy_Tc":"%Tc","haproxy_Tt":"%Tt","haproxy_bytesRead":"%B","haproxy_terminationState":"%ts","haproxy_actconn":%ac,"haproxy_FrontendCurrentConn":%fc,"haproxy_backendCurrentConn":%bc,"haproxy_serverConcurrentConn":%sc,"haproxy_retries":%rc,"haproxy_srvQueue":%sq,"haproxy_backendQueue":%bq,"haproxy_backendSourceIP":"%bi","haproxy_backendSourcePort":"%bp"}

  # option httpchk GET /test/index.php # 检测后端服务器页面判断健康，默认是检测端口

  server nginx1 nginx1:80 weight 1 maxconn 10000 check inter 10s
  server nginx2 nginx2:80 weight 1 maxconn 10000 check inter 10s
  server nginx3 nginx3:80 weight 1 maxconn 10000 check inter 10s

  # server语法：server [:port] [param*]
  # 使用server关键字来设置后端服务器；为后端服务器所设置的内部名称[php_server_1]，该名
  # 称将会呈现在日志或警报中、后端服务器的IP地址，支持端口映射[10.12.25.68:80]、指定该
  # 服务器的SERVERID为1[cookie 1]、接受健康监测[check]、监测的间隔时长，单位毫秒[inter
  # 2000]、监测正常多少次后被认为后端服务器是可用的[rise 3]、监测失败多少次后被认为后端
  # 服务器是不可用的[fall 3]、分发的权重[weight 2]、最为备份用的后端服务器，当正常的服
  # 务器全部都宕机后，才会启用备份服务器[backup]


listen admin_stats # 状态页
  bind *:5001
  bind-process 1 # 状态页进程数，默认会有警告
  mode http
  option httplog
  option dontlognull

  log-format {"haproxy_clientIP":"%ci","haproxy_clientPort":"%cp","haproxy_dateTime":"%t","haproxy_frontendNameTransport":"%ft","haproxy_backend":"%b","haproxy_serverName":"%s","haproxy_Tw":"%Tw","haproxy_Tc":"%Tc","haproxy_Tt":"%Tt","haproxy_bytesRead":"%B","haproxy_terminationState":"%ts","haproxy_actconn":%ac,"haproxy_FrontendCurrentConn":%fc,"haproxy_backendCurrentConn":%bc,"haproxy_serverConcurrentConn":%sc,"haproxy_retries":%rc,"haproxy_srvQueue":%sq,"haproxy_backendQueue":%bq,"haproxy_backendSourceIP":"%bi","haproxy_backendSourcePort":"%bp"}

  maxconn 10 # 状态页的最大连接数
  stats refresh 30s # 刷新时间
  stats uri /hastats # 状态页位置 uri
  stats realm XXX-XXX # 登录框提示
  stats auth admin:qR49cRBNY5H # 登录信息
  stats hide-version # 隐藏状态页的版本信息，显示有安全风险
